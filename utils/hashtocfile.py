#!/usr/bin/python
'''
Hash to C file : convert a track in '#' format to a compilable c file

Expects a file 8 pixels wide. No error checking for that yet.
'''

def lines_to_binary(lines, usehex):
    '''input lines of (8) hashes or spaces, output binary representation

    blah
    '''

    output = []
    line_number = 1
    for line in lines:
        byte = "0b" + line.replace('#','1').replace(' ','0').rstrip('\n')
        if usehex:
            # convert all output to hex
            byte = hex(eval(byte))
        if line_number < len(lines): 
            output.append(byte + ",")
            line_number += 1
        else:
            # don't put a comma after the last line
            output.append(byte)
    return output

preamble = '''
#ifndef _RACE_TRACK
#define _RACE_TRACK
/***********************************
 *                                 *
 *       Race track sample         *
 *                                 *
 *   Generated by hashtocfile.py   *
 *                                 *
 *      Andrew Watson - 2011       *
 *                                 *
 ***********************************/

#include <avr/pgmspace.h>

 /*
  * this variable contains the race track
  * load segments using the functions from
  * track_utils.h
  */

 const unsigned char race_track[%s] PROGMEM = {'''

postscript = ''' };
#endif
 '''



if __name__ == '__main__':
    from optparse import OptionParser

    parser = OptionParser()

    parser.add_option("-f", "--file", dest="input_file", 
            help="create hash from FILE", metavar="FILE")
    parser.add_option("-v", "--verbose", dest="verbose", default=False,
            help="verbose: print image to stdout", action="store_true" )
    parser.add_option("-x", "--hex", dest="usehex", default=False,
            help="output as hex (saves space)", action="store_true" )
    parser.add_option("-n", "--noreturn", dest="noreturn", default=False,
            help="remove line endings to make file compact (and unreadable)",
            action="store_true" )


    opts, args = parser.parse_args()

    #print opts.input_file


    with open(opts.input_file) as input:
        lines = input.readlines()

    if opts.verbose:
        for line in lines:
            print line.rstrip('\n')

    array = lines_to_binary(lines, usehex=opts.usehex)

    line_prefix = "    " # 4 spaces

    print preamble % len(array)
    if opts.noreturn:
        print " ".join(array)
    else:
        for byte in array:
            print line_prefix + byte
    print postscript

